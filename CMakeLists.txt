project(caffe_deploy)
cmake_minimum_required(VERSION 3.0)

### option and message

option(DEBUG "Debug mode." OFF)
option(CPU_ONLY "CPU only mode." OFF)
option(USE_CUDNN "Use CuDNN library." ON)
option(USE_EIGEN "Use submodules/eigen as BLAS." ON)

if(DEBUG)
  message(STATUS "Use debug mode.")
else()
  message(STATUS "Do not use debug mode.")
endif()
if(CPU_ONLY)
  message(STATUS "Use CPU only mode.")
  if(USE_CUDNN)
    message(FATAL_ERROR "CuDNN is not available under CPU only mode.")
  endif()
else()
  message(STATUS "Use CPU and GPU mode.")
  if(USE_CUDNN)
    message(STATUS "Use CuDNN library.")
  else()
    message(STATUS "Do not use CuDNN library.")
  endif()
endif()
if(USE_EIGEN)
  message(STATUS "Use submodules/eigen as BLAS.")
else()
  message(STATUS "Use OpenBlas as BLAS.")
endif()

if(${CMAKE_CURRENT_SOURCE_DIR} STREQUAL ${CMAKE_SOURCE_DIR})
  set(TOP_PROJECT ON)
else()
  set(TOP_PROJECT OFF)
endif()

### sub directory

add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/submodules/protobuf)
if(USE_EIGEN)
  add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/submodules/eigen)
endif()

### protoc

set(PROTO_FILE ${CMAKE_CURRENT_SOURCE_DIR}/src/caffe/proto/caffe.proto)
set(PROTO_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/caffe/proto/caffe.pb.cc)
set(PROTO_HEADER_PATH ${CMAKE_CURRENT_SOURCE_DIR}/include/caffe/proto/)
set(PROTO_HEADER_FILE caffe.pb.h)
add_custom_command(
  OUTPUT ${PROTO_SRC} ${PROTO_HEADER_PATH}/${PROTO_HEADER_FILE} DEPENDS protoc ${PROTO_FILE}
  COMMAND protoc ${PROTO_FILE} --cpp_out=. --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/src
  COMMAND mv caffe/proto/caffe.pb.cc ${PROTO_SRC}
  COMMAND mkdir -p ${PROTO_HEADER_PATH}
  COMMAND mv caffe/proto/caffe.pb.h ${PROTO_HEADER_PATH}/${PROTO_HEADER_FILE}
)

### CUDA

if(NOT CPU_ONLY)
  find_package(CUDA REQUIRED)
  list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_30,code=sm_30)
  list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_32,code=sm_32)
  list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_35,code=sm_35)
  list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_50,code=sm_50)
  list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_52,code=sm_52)
  list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_53,code=sm_53)
  list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_60,code=sm_60)
  list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_61,code=sm_61)
  list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_62,code=sm_62)
  list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_62,code=compute_62)
  list(APPEND CUDA_NVCC_FLAGS -Xcompiler -fPIC)
  list(APPEND CUDA_NVCC_FLAGS -std=c++11)
endif()

### target

file(GLOB_RECURSE CPP_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/src/caffe/*.cpp)
file(GLOB_RECURSE CC_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/src/caffe/*.cc)
file(GLOB_RECURSE CUDA_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/src/caffe/*.cu)
file(GLOB_RECURSE TEST_CPP_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/src/caffe/test_*.cpp ${CMAKE_CURRENT_SOURCE_DIR}/src/gtest/*.cpp)
file(GLOB_RECURSE TEST_CUDA_SRCS ${CMAKE_CURRENT_SOURCE_DIR}/src/caffe/test_*.cu)
list(REMOVE_ITEM CPP_SRCS ${TEST_CPP_SRCS})
list(REMOVE_ITEM CUDA_SRCS ${TEST_CUDA_SRCS})
if(NOT CPU_ONLY)
  # TODO: Jinwei: ugly code due to CUDA can't use target_include_directories()
  cuda_include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
  cuda_include_directories(${CMAKE_CURRENT_SOURCE_DIR}/submodules/protobuf/src)
  cuda_compile(CUDA_OBJS ${CUDA_SRCS})
endif()
if(TOP_PROJECT)
  add_library(caffe_deploy SHARED ${CPP_SRCS} ${CC_SRCS} ${PROTO_SRC} ${CUDA_OBJS})
else()
  add_library(caffe_deploy STATIC ${CPP_SRCS} ${CC_SRCS} ${PROTO_SRC} ${CUDA_OBJS})
endif()

### compile options and definations

include(CheckCXXCompilerFlag)
if(NOT MSVC)
  check_cxx_compiler_flag(-std=c++11 COMPILER_SUPPORTS_CXX11)
  check_cxx_compiler_flag(-std=c++0x COMPILER_SUPPORTS_CXX0X)
  if(COMPILER_SUPPORTS_CXX11)
    message(STATUS "C++11 is used.")
    set(CXX11_FLAG -std=c++11)
  elseif(COMPILER_SUPPORTS_CXX0X)
    message(STATUS "C++0x is used.")
    set(CXX11_FLAG -std=c++0x)
  else()
    message(FATAL_ERROR "C++11 or C++0x is needed.")
  endif()
  check_cxx_compiler_flag(-msse2 COMPILER_SUPPORTS_SSE2)
  if(COMPILER_SUPPORTS_SSE2)
    message(STATUS "SSE2 is used.")
    target_compile_options(caffe_deploy PRIVATE -msse2)
  endif()
  check_cxx_compiler_flag(-mavx COMPILER_SUPPORTS_AVX)
  if(COMPILER_SUPPORTS_AVX)
    message(STATUS "AVX is used.")
    target_compile_options(caffe_deploy PRIVATE -mavx)
  endif()
  check_cxx_compiler_flag(-mavx2 COMPILER_SUPPORTS_AVX2)
  if(COMPILER_SUPPORTS_AVX2)
    message(STATUS "AVX2 is used.")
    target_compile_options(caffe_deploy PRIVATE "-mavx2")
  endif()
  check_cxx_compiler_flag(-mfpu=neon COMPILER_SUPPORTS_NEON)
  if(COMPILER_SUPPORTS_NEON)
    message(STATUS "NEON is used.")
    target_compile_options(caffe_deploy PRIVATE -mfpu=neon)
  else()
    if(${CMAKE_SYSTEM_PROCESSOR} STREQUAL aarch64)
      message(STATUS "NEON is used by default on aarch64.")
    endif()
  endif()
endif()
target_compile_options(caffe_deploy PRIVATE ${CXX11_FLAG})

if(DEBUG)
  target_compile_definitions(caffe_deploy PRIVATE DEBUG)
  if(MSVC)
    target_compile_definitions(caffe_deploy PRIVATE /Od)
  else()
    target_compile_options(caffe_deploy PRIVATE -g)
    target_compile_options(caffe_deploy PRIVATE -O0)
  endif()
  if(NOT CPU_ONLY)
    list(APPEND CUDA_NVCC_FLAGS -G)
    list(APPEND CUDA_NVCC_FLAGS -O0)
  endif()
else()
  target_compile_definitions(caffe_deploy PRIVATE NDEBUG)
  if(MSVC)
    target_compile_options(caffe_deploy PRIVATE /O2)
  else()
    target_compile_options(caffe_deploy PRIVATE -O3)
  endif()
  if(NOT CPU_ONLY)
    list(APPEND CUDA_NVCC_FLAGS -O3)
  endif()
endif()

if(CPU_ONLY)
  target_compile_definitions(caffe_deploy PUBLIC CPU_ONLY)
else()
  if(USE_CUDNN)
    target_compile_definitions(caffe_deploy PUBLIC USE_CUDNN)
  endif()
endif()
if(USE_EIGEN)
  target_compile_definitions(caffe_deploy PRIVATE USE_EIGEN)
endif()

if(MSVC)
  target_compile_options(caffe_deploy PRIVATE -D_CRT_SECURE_NO_WARNINGS=1 /MP)
  target_compile_options(caffe_deploy PRIVATE /wd4244 /wd4267 /wd4018 /wd4355 /wd4800 /wd4251 /wd4996 /wd4146 /wd4305)
endif()

set_target_properties(caffe_deploy PROPERTIES POSITION_INDEPENDENT_CODE ON)

### include

target_include_directories(caffe_deploy PUBLIC ${CMAKE_CURRENT_SOURCE_DIR}/include)
if(NOT CPU_ONLY)
  target_include_directories(caffe_deploy PUBLIC ${CUDA_INCLUDE_DIRS})
endif()

### link

target_link_libraries(caffe_deploy PUBLIC protobuf)
if(USE_EIGEN)
  target_link_libraries(caffe_deploy PRIVATE eigen)
endif()
find_package(Threads REQUIRED)
if(CMAKE_USE_PTHREADS_INIT)
  target_link_libraries(caffe_deploy PUBLIC pthread)
endif()
if(NOT CPU_ONLY)
  find_library(CUDART_LIBRARY cudart HINTS ${CUDA_TOOLKIT_ROOT_DIR} PATH_SUFFIXES lib64)
  message(STATUS "cudaRT library: " ${CUDART_LIBRARY})
  target_link_libraries(caffe_deploy PUBLIC ${CUDART_LIBRARY})
  find_library(CUBLAS_LIBRARY cublas HINTS ${CUDA_TOOLKIT_ROOT_DIR} PATH_SUFFIXES lib64)
  message(STATUS "cuBLAS library: " ${CUBLAS_LIBRARY})
  target_link_libraries(caffe_deploy PUBLIC ${CUBLAS_LIBRARY})
  find_library(CURAND_LIBRARY curand HINTS ${CUDA_TOOLKIT_ROOT_DIR} PATH_SUFFIXES lib64)
  message(STATUS "cuRAND library: " ${CURAND_LIBRARY})
  target_link_libraries(caffe_deploy PUBLIC ${CURAND_LIBRARY})
  if(USE_CUDNN)
    find_library(CUDNN_LIBRARY cudnn HINTS ${CUDA_TOOLKIT_ROOT_DIR} PATH_SUFFIXES lib64)
    message(STATUS "cuDNN library: " ${CUDNN_LIBRARY})
    target_link_libraries(caffe_deploy PUBLIC ${CUDNN_LIBRARY})
  endif()
endif()
if(NOT USE_EIGEN)
  find_package(BLAS REQUIRED)
  message(STATUS "BLAS library: " ${BLAS_LIBRARIES})
  target_link_libraries(caffe_deploy PUBLIC ${BLAS_LIBRARIES})
endif()

### install

if(TOP_PROJECT)
  set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/install)
  install(TARGETS caffe_deploy DESTINATION lib)
  install(DIRECTORY include/caffe DESTINATION include)
  get_target_property(PROTOBUF_INSTALL_INCLUDE_PATH protobuf INSTALL_INCLUDE_PATH)
  get_target_property(PROTOBUF_INSTALL_INCLUDE_PATTERN protobuf INSTALL_INCLUDE_PATTERN)
  install(DIRECTORY ${PROTOBUF_INSTALL_INCLUDE_PATH} DESTINATION include
      FILES_MATCHING PATTERN ${PROTOBUF_INSTALL_INCLUDE_PATTERN})
endif()

### test

if(TOP_PROJECT)
  if(NOT CPU_ONLY)
    # TODO: Jinwei: ugly code due to CUDA can't use target_include_directories()
    cuda_include_directories(${CMAKE_CURRENT_SOURCE_DIR}/src)
    cuda_compile(TEST_CUDA_OBJS ${TEST_CUDA_SRCS})
  endif()
  add_executable(caffe_deploy_test ${TEST_CPP_SRCS} ${TEST_CUDA_OBJS})
  target_include_directories(caffe_deploy_test PRIVATE ${CMAKE_CURRENT_SOURCE_DIR}/src)
  target_compile_options(caffe_deploy_test PRIVATE ${CXX11_FLAG})
  target_link_libraries(caffe_deploy_test PRIVATE caffe_deploy)

  if(CPU_ONLY)
    set(GTEST_FILTER "--gtest_filter=\"-*GPU*\"")
  endif()
  add_custom_target(runtest caffe_deploy_test 0 ${GTEST_FILTER})
endif()
