project(caffe_deploy)
cmake_minimum_required(VERSION 2.6)

### option and message

option(DEBUG "Debug mode." off)
option(CPU_ONLY "CPU only mode." ON)
option(USE_CUDNN "Use CuDNN library." OFF)
option(USE_EIGEN "Use submodules/eigen as BLAS." ON)
option(BUILD_TEST "Build unit-test." OFF)

if(DEBUG)
	message(STATUS "Use debug mode.")
else()
	message(STATUS "Do not use debug mode.")
endif()
if(CPU_ONLY)
	message(STATUS "Use CPU only mode.")
	if(USE_CUDNN)
		message(FATAL_ERROR "CuDNN is not available under CPU only mode.")
	endif()
else()
	message(STATUS "Use CPU and GPU mode.")
	if(USE_CUDNN)
		message(STATUS "Use CuDNN library.")
	else()
		message(STATUS "Do not use CuDNN library.")
	endif()
	find_package(CUDA REQUIRED)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_20,code=sm_20)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_30,code=sm_30)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_35,code=sm_35)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_50,code=sm_50)
endif()
if(USE_EIGEN)
	message(STATUS "Use submodules/eigen as BLAS.")
else()
	message(STATUS "Use OpenBlas as BLAS.")
endif()

### sub directory

include_directories(${caffe_deploy_SOURCE_DIR}/include)
include_directories(${caffe_deploy_SOURCE_DIR}/submodules/protobuf/build_linux_x86_64/include)
add_subdirectory(${caffe_deploy_SOURCE_DIR}/submodules/protobuf)

### definitions

add_definitions("-std=c++11")
if(NOT CPU_ONLY)
	list(APPEND CUDA_NVCC_FLAGS -std=c++11)
endif()
if(DEBUG)
	add_definitions("-DDEBUG")
	if(MSVC)
		add_definitions("/Od")
	else()
		add_definitions("-g")
		add_definitions("-O0")
	endif()
	if(NOT CPU_ONLY)
		list(APPEND CUDA_NVCC_FLAGS -G)
		list(APPEND CUDA_NVCC_FLAGS -O0)
	endif()
else()
	add_definitions("-DNDEBUG")
	if(MSVC)
		add_definitions("/O2")
	else()
		add_definitions("-O3")
	endif()
	if(NOT CPU_ONLY)
		list(APPEND CUDA_NVCC_FLAGS -O3)
	endif()
endif()
if(CPU_ONLY)
	add_definitions("-DCPU_ONLY")
else()
	if(USE_CUDNN)
		add_definitions("-DUSE_CUDNN")
	endif()
endif()
if(USE_EIGEN)
	add_definitions("-DUSE_EIGEN")
endif()
if(MSVC)
	add_definitions("-D_CRT_SECURE_NO_WARNINGS=1")
	add_definitions("/wd4018")
	add_definitions("/wd4065")
	add_definitions("/wd4146")
	add_definitions("/wd4244")
	add_definitions("/wd4251")
	add_definitions("/wd4267")
	add_definitions("/wd4305")
	add_definitions("/wd4355")
	add_definitions("/wd4506")
	add_definitions("/wd4661")
	add_definitions("/wd4715")
	add_definitions("/wd4800")
	add_definitions("/wd4838")
	add_definitions("/wd4996")
else()
	add_definitions("-fPIC")
endif()

### include

include_directories(${caffe_deploy_SOURCE_DIR}/include)
include_directories(${caffe_deploy_SOURCE_DIR}/submodules/protobuf/build_linux_x86_64/include)
if(USE_EIGEN)
	include_directories(${caffe_deploy_SOURCE_DIR}/submodules/eigen)
endif()
if(NOT CPU_ONLY)
	include_directories(${CUDA_INCLUDE_DIRS})
endif()

### link directory

if(NOT CPU_ONLY)
	link_directories(${CUDA_TOOLKIT_ROOT_DIR}/lib64)
endif()

### build rules

file(GLOB_RECURSE CPP_SRCS ${caffe_deploy_SOURCE_DIR}/src/caffe/*.cpp)
file(GLOB_RECURSE CC_SRCS ${caffe_deploy_SOURCE_DIR}/src/caffe/*.cc)
file(GLOB_RECURSE CUDA_SRCS ${caffe_deploy_SOURCE_DIR}/src/caffe/*.cu)
file(GLOB_RECURSE TEST_CPP_SRCS ${caffe_deploy_SOURCE_DIR}/src/caffe/test_*.cpp ${caffe_deploy_SOURCE_DIR}/src/gtest/*.cpp)
file(GLOB_RECURSE TEST_CC_SRCS ${caffe_deploy_SOURCE_DIR}/src/gtest/*.cc)
file(GLOB_RECURSE TEST_CUDA_SRCS ${caffe_deploy_SOURCE_DIR}/src/caffe/test_*.cu)
list(REMOVE_ITEM CPP_SRCS ${TEST_CPP_SRCS})
list(REMOVE_ITEM CUDA_SRCS ${TEST_CUDA_SRCS})
if(NOT CPU_ONLY)
	cuda_compile(CUDA_OBJS ${CUDA_SRCS})
endif()
if(MSVC)
	add_library(caffe_deploy STATIC ${CPP_SRCS} ${CC_SRCS} ${CUDA_OBJS})
	target_link_libraries(caffe_deploy INTERFACE protobuf)
	if(NOT CPU_ONLY OR NOT USE_EIGEN)
		message(FATAL_ERROR "CPU_ONLY and USE_EIGEN is needed for MSVC.")
	endif()
else()
	add_library(caffe_deploy SHARED ${CPP_SRCS} ${CC_SRCS} ${CUDA_OBJS})
	target_link_libraries(caffe_deploy PRIVATE -Wl,--whole-archive protobuf -Wl,--no-whole-archive)
	target_link_libraries(caffe_deploy PUBLIC pthread)
	if(NOT CPU_ONLY)
		# TODO: Jinwei: static link cudart cause a segmentation falut in Im2colKernelTest
		target_link_libraries(caffe_deploy PUBLIC cudart dl rt)
		target_link_libraries(caffe_deploy PRIVATE -Wl,--whole-archive cublas_static.a curand_static.a culibos.a -Wl,--no-whole-archive)
		if(USE_CUDNN)
			target_link_libraries(caffe_deploy PRIVATE -Wl,--whole-archive cudnn_static.a -Wl,--no-whole-archive)
		endif()
	endif()
	if(NOT USE_EIGEN)
		# TODO: Jinwei: Use find_package for OpenBlas
		target_link_libraries(caffe_deploy PRIVATE -Wl,--whole-archive openblas.a -Wl,--no-whole-archive)
	endif()
endif()

### install

set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/install)
install(TARGETS caffe_deploy DESTINATION lib)
install(DIRECTORY include/caffe DESTINATION include)
install(DIRECTORY submodules/protobuf/build_linux_x86_64/include/google DESTINATION include)
if(NOT CPU_ONLY)
	# TODO: Jinwei: A ugly implemention to avoid cuda's symbol link of include directory.
	install(DIRECTORY ${CUDA_TOOLKIT_ROOT_DIR}/targets/x86_64-linux/include DESTINATION .)
endif()
if(MSVC)
	install(TARGETS protobuf DESTINATION lib)
endif()

### test

if(BUILD_TEST)
	include_directories(${caffe_deploy_SOURCE_DIR}/src)
	if(NOT CPU_ONLY)
		cuda_compile(TEST_CUDA_OBJS ${TEST_CUDA_SRCS})
	endif()
	add_executable(caffe_deploy_test ${TEST_CPP_SRCS} ${TEST_CXX_SRCS} ${TEST_CUDA_OBJS})
	target_link_libraries(caffe_deploy_test PRIVATE caffe_deploy pthread)

	if(CPU_ONLY)
		set(GTEST_FILTER "--gtest_filter=\"-*GPU*\"")
	endif()
	add_custom_target(runtest caffe_deploy_test 0 ${GTEST_FILTER} DEPEND caffe_deploy_test)
endif()
