project(caffe_deploy)
cmake_minimum_required(VERSION 2.6)

### option and message

option(DEBUG "Debug mode." off)
option(CPU_ONLY "CPU only mode." ON)
option(USE_CUDNN "Use CuDNN library." OFF)
option(USE_EIGEN "Use submodules/eigen as BLAS." ON)
option(BUILD_TEST "Build unit-test." OFF)

if(DEBUG)
	message(STATUS "Use debug mode.")
else()
	message(STATUS "Do not use debug mode.")
endif()
if(CPU_ONLY)
	message(STATUS "Use CPU only mode.")
	if(USE_CUDNN)
		message(FATAL_ERROR "CuDNN is not available under CPU only mode.")
	endif()
else()
	message(STATUS "Use CPU and GPU mode.")
	if(USE_CUDNN)
		message(STATUS "Use CuDNN library.")
	else()
		message(STATUS "Do not use CuDNN library.")
	endif()
	find_package(CUDA REQUIRED)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_30,code=sm_30)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_35,code=sm_35)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_50,code=sm_50)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_52,code=sm_52)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_60,code=sm_60)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_61,code=sm_61)
	list(APPEND CUDA_NVCC_FLAGS -gencode arch=compute_61,code=compute_61)
	list(APPEND CUDA_NVCC_FLAGS -Xcompiler -fPIC)
endif()
if(USE_EIGEN)
	message(STATUS "Use submodules/eigen as BLAS.")
else()
	message(STATUS "Use OpenBlas as BLAS.")
endif()

### sub directory

include_directories(${caffe_deploy_SOURCE_DIR}/include)
add_subdirectory(${caffe_deploy_SOURCE_DIR}/submodules/protobuf)

### protoc

set(PROTO_FILE ${CMAKE_CURRENT_SOURCE_DIR}/src/caffe/proto/caffe.proto)
set(PROTO_SRC ${CMAKE_CURRENT_SOURCE_DIR}/src/caffe/proto/caffe.pb.cc)
set(PROTO_HEADER_PATH ${CMAKE_CURRENT_SOURCE_DIR}/include/caffe/proto/)
set(PROTO_HEADER_FILE caffe.pb.h)
add_custom_command(
  OUTPUT ${PROTO_SRC} ${PROTO_HEADER_PATH}/${PROTO_HEADER_FILE} DEPENDS protoc ${PROTO_FILE}
  COMMAND protoc ${PROTO_FILE} --cpp_out=. --proto_path=${CMAKE_CURRENT_SOURCE_DIR}/src
  COMMAND mv caffe/proto/caffe.pb.cc ${PROTO_SRC}
  COMMAND mkdir -p ${PROTO_HEADER_PATH}
  COMMAND mv caffe/proto/caffe.pb.h ${PROTO_HEADER_PATH}/${PROTO_HEADER_FILE}
)

### definitions

include(CheckCXXCompilerFlag)
if(NOT MSVC)
	check_cxx_compiler_flag("-std=c++11" COMPILER_SUPPORTS_CXX11)
	check_cxx_compiler_flag("-std=c++0x" COMPILER_SUPPORTS_CXX0X)
	if(COMPILER_SUPPORTS_CXX11)
		message(STATUS "C++11 is used.")
		add_definitions("-std=c++11")
	elseif(COMPILER_SUPPORTS_CXX0X)
		message(STATUS "C++0x is used.")
		add_definitions("-std=c++0x")
	else()
		message(FATAL_ERROR "C++11 or C++0x is needed.")
	endif()
	check_cxx_compiler_flag("-msse2" COMPILER_SUPPORTS_SSE2)
	if(COMPILER_SUPPORTS_SSE2)
		message(STATUS "SSE2 is used.")
		add_definitions("-msse2")
	endif()
	check_cxx_compiler_flag("-mavx" COMPILER_SUPPORTS_AVX)
	if(COMPILER_SUPPORTS_AVX)
		message(STATUS "AVX is used.")
		add_definitions("-mavx")
	endif()
	check_cxx_compiler_flag("-mavx2" COMPILER_SUPPORTS_AVX2)
	if(COMPILER_SUPPORTS_AVX2)
		message(STATUS "AVX2 is used.")
		add_definitions("-mavx2")
	endif()
	check_cxx_compiler_flag("-mfpu=neon" COMPILER_SUPPORTS_NEON)
	if(COMPILER_SUPPORTS_NEON)
		message(STATUS "NEON is used.")
		add_definitions("-mfpu=neon")
	endif()
endif()

if(NOT CPU_ONLY)
	list(APPEND CUDA_NVCC_FLAGS -std=c++11)
endif()
if(DEBUG)
	add_definitions("-DDEBUG")
	if(MSVC)
		add_definitions("/Od")
	else()
		add_definitions("-g")
		add_definitions("-O0")
	endif()
	if(NOT CPU_ONLY)
		list(APPEND CUDA_NVCC_FLAGS -G)
		list(APPEND CUDA_NVCC_FLAGS -O0)
	endif()
else()
	add_definitions("-DNDEBUG")
	if(MSVC)
		add_definitions("/O2")
	else()
		add_definitions("-O3")
	endif()
	if(NOT CPU_ONLY)
		list(APPEND CUDA_NVCC_FLAGS -O3)
	endif()
endif()
if(CPU_ONLY)
	add_definitions("-DCPU_ONLY")
else()
	if(USE_CUDNN)
		add_definitions("-DUSE_CUDNN")
	endif()
endif()
if(USE_EIGEN)
	add_definitions("-DUSE_EIGEN")
endif()
if(MSVC)
	add_definitions("-D_CRT_SECURE_NO_WARNINGS=1")
	add_definitions("/wd4018")
	add_definitions("/wd4065")
	add_definitions("/wd4146")
	add_definitions("/wd4244")
	add_definitions("/wd4251")
	add_definitions("/wd4267")
	add_definitions("/wd4305")
	add_definitions("/wd4355")
	add_definitions("/wd4506")
	add_definitions("/wd4661")
	add_definitions("/wd4715")
	add_definitions("/wd4800")
	add_definitions("/wd4838")
	add_definitions("/wd4996")
else()
	add_definitions("-fPIC")
endif()

### include

include_directories(${caffe_deploy_SOURCE_DIR}/include)
if(USE_EIGEN)
	include_directories(${caffe_deploy_SOURCE_DIR}/submodules/eigen)
endif()
if(NOT CPU_ONLY)
	include_directories(${CUDA_INCLUDE_DIRS})
endif()

### link directory

if(NOT CPU_ONLY)
	link_directories(${CUDA_TOOLKIT_ROOT_DIR}/lib64)
endif()

### build rules

file(GLOB_RECURSE CPP_SRCS ${caffe_deploy_SOURCE_DIR}/src/caffe/*.cpp)
file(GLOB_RECURSE CC_SRCS ${caffe_deploy_SOURCE_DIR}/src/caffe/*.cc)
file(GLOB_RECURSE CUDA_SRCS ${caffe_deploy_SOURCE_DIR}/src/caffe/*.cu)
file(GLOB_RECURSE TEST_CPP_SRCS ${caffe_deploy_SOURCE_DIR}/src/caffe/test_*.cpp ${caffe_deploy_SOURCE_DIR}/src/gtest/*.cpp)
file(GLOB_RECURSE TEST_CC_SRCS ${caffe_deploy_SOURCE_DIR}/src/gtest/*.cc)
file(GLOB_RECURSE TEST_CUDA_SRCS ${caffe_deploy_SOURCE_DIR}/src/caffe/test_*.cu)
list(REMOVE_ITEM CPP_SRCS ${TEST_CPP_SRCS})
list(REMOVE_ITEM CUDA_SRCS ${TEST_CUDA_SRCS})
if(NOT CPU_ONLY)
	cuda_compile(CUDA_OBJS ${CUDA_SRCS})
endif()
add_library(caffe_deploy STATIC ${CPP_SRCS} ${CC_SRCS} ${PROTO_SRC} ${CUDA_OBJS})
target_link_libraries(caffe_deploy protobuf)
if(NOT MSVC)
	target_link_libraries(caffe_deploy pthread)
endif()
if(NOT CPU_ONLY)
	target_link_libraries(caffe_deploy cudart cublas curand)
	if(USE_CUDNN)
		target_link_libraries(caffe_deploy cudnn)
	endif()
endif()
if(NOT USE_EIGEN)
	# TODO: Jinwei: Use find_package for OpenBlas
	target_link_libraries(caffe_deploy openblas)
endif()

### install

set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_BINARY_DIR}/install)
install(TARGETS caffe_deploy DESTINATION lib)
install(DIRECTORY include/caffe DESTINATION include)
get_target_property(PROTOBUF_INSTALL_INCLUDE_PATH protobuf INSTALL_INCLUDE_PATH)
get_target_property(PROTOBUF_INSTALL_INCLUDE_PATTERN protobuf INSTALL_INCLUDE_PATTERN)
get_target_property(PROTOBUF_INSTALL_LIB_PATH protobuf INSTALL_LIB_PATH)
install(FILES ${PROTOBUF_INSTALL_LIB_PATH} DESTINATION lib)
install(DIRECTORY ${PROTOBUF_INSTALL_INCLUDE_PATH} DESTINATION include
		FILES_MATCHING PATTERN ${PROTOBUF_INSTALL_INCLUDE_PATTERN})

### test

if(BUILD_TEST)
	include_directories(${caffe_deploy_SOURCE_DIR}/src)
	if(NOT CPU_ONLY)
		cuda_compile(TEST_CUDA_OBJS ${TEST_CUDA_SRCS})
	endif()
	add_executable(caffe_deploy_test ${TEST_CPP_SRCS} ${TEST_CXX_SRCS} ${TEST_CUDA_OBJS})
	target_link_libraries(caffe_deploy_test caffe_deploy)

	if(CPU_ONLY)
		set(GTEST_FILTER "--gtest_filter=\"-*GPU*\"")
	endif()
	add_custom_target(runtest caffe_deploy_test 0 ${GTEST_FILTER} DEPEND caffe_deploy_test)
endif()
